# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jjaQHKQytntySsp51Gg1eFboFOZpJjDV
"""

import torch
import random
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_wine

wine = load_wine()
features = 13

X_train, X_test, y_train, y_test = train_test_split(
    wine.data[:, :features],
    wine.target,
    test_size=0.3,
    shuffle=True
)
wine.data.shape

X_train = torch.FloatTensor(X_train)
X_test = torch.FloatTensor(X_test)
y_train = torch.LongTensor(y_train)
y_test = torch.LongTensor(y_test)


class WineNet(torch.nn.Module):
  def __init__(self, n_input, n_hiden_neurons):
    super(WineNet, self).__init__()
    self.fc1 = torch.nn.Linear(n_input, n_hiden_neurons)
    self.activ1 = torch.nn.Sigmoid()
    self.fc2 = torch.nn.Linear(n_hiden_neurons, n_hiden_neurons)
    self.activ2 = torch.nn.Sigmoid()
    self.fc3 = torch.nn.Linear(n_hiden_neurons, 3)
    self.sm = torch.nn.Softmax(dim=1)

  def forward(self, x):
    x = self.fc1(x)
    x = self.activ1(x)
    x = self.fc2(x)
    x = self.activ2(x)
    x = self.fc3(x)
    return x

  def inference(self, x):
        x = self.forward(x)
        x = self.sm(x)
        return x

def train_and_evaluate(n_input, n_hidden, batch_size):
  wine_net = WineNet(n_input, n_hidden)

  loss = torch.nn.CrossEntropyLoss()
  optimizer = torch.optim.Adam(wine_net.parameters(), lr=1.0e-3)

  for epoch in range(2000):
    order = np.random.permutation(len(X_train))
    for start_index in range(0, len(X_train), batch_size):
      optimizer.zero_grad()
      batch_indexes = order[start_index:start_index+batch_size]

      x_batch = X_train[batch_indexes]
      y_batch = y_train[batch_indexes]

      prediction = wine_net.forward(x_batch)

      loss(prediction, y_batch).backward()
      optimizer.step()

  with torch.no_grad():
        test_preds = wine_net(X_test)
        test_preds = test_preds.argmax(dim=1)
        accuracy = (test_preds == y_test).float().mean().item()

  return accuracy

n1 = 13
n2 = 15
n_variable = [3, 5, 10, 15, 20, 25, 50, 100]


accuracies = [train_and_evaluate(n1, n, n2) for n in n_variable]


plt.plot(n_variable, accuracies, marker='o')
plt.title('Accuracy vs Number of Hidden Neurons')
plt.xlabel('Number of Hidden Neurons')
plt.ylabel('Accuracy')
plt.show()

accuracies = [train_and_evaluate(n1, n2, n) for n in n_variable]


plt.plot(n_variable, accuracies, marker='o')
plt.title('Accuracy vs batch size')
plt.xlabel('batch size')
plt.ylabel('Accuracy')
plt.show()